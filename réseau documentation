Pour pouvoir créer le réseau éléctrique sous forme de graphe il y a 2 classes permettant de connecter les différents éléments.
La classe Noeud permêt de créer à la fois les noeuds de concentration et de distribution car son constructeur n' a aucun paramètre.
Le comportement du Noeud dépendra des lignes auxquelles il aura été lié.

Les Lignes peuvent êtres de différents types en fonction des paramètres passés au constructeur et donc de leur fonction. 
Le premier paramètre est l'entrée de la ligne et peut-être soit une centrale électrique soit un autre Noeud.
Le second paramètre est la sortie de la ligne et peut-être soit un consommateur soit un autre Noeud.
Le troixième paramètre est la puissance maximale qui peut être transmise par la ligne.

Un noeud se comporte comme noeud de distribution si il est passé en tant que premier paramètre de plusieurs lignes.
Si il est passé en tant que second paramètre de plusieurs lignes alors il se comporte comme un noeud de distribution.

Chaque noeud contient les références vers les objets lignes auxquels il est connecté et ces références sont stockées dans deux listes en fonction de la direction du flux électrique les traversant. 
Si le flux sort du noeud alors la ligne est stockée dans Lignes_out sinon dans Lignes_in. Ce stockage est appelé par le constructeur de la lignes sur les noeuds dont elle a les références.

Le réseau à la capacité de s'autoréguler en vérifiant que la différence entre des flux sortants et entrants de chaque noeud soit nulle. Cette différence peut-être résorbée en envoyant des consignes de régulation de puissance jusqu'aux centrales.
Les lignes et les centrales se protègent automatiquement contre la surproduction et la surchage en adaptant les consignes de régulation de puissance lorsque c'est nécessaire.

La mise à jour de l'état du réseau est réalisée par l'appel de la méthode UpdateAll() du centre de controle.
Premièrement, on met à jour la consommation de chaque consommateur avec une méthode de la classe consommateur et on change la valeur de la puissance à transmettre sur leurs lignes pour que le réseau puisse en tenir compte dans sa régulation.
Deuxièmement, on appelle la méthode UpdateNoeud() sur chacun des noeuds pour réguler le réseau automatiquement. les appels de cette méthode sont lié à la variable upcnt qui définit combien de fois nous permettons au réseau de s'autoréguler à chaque mise à jour de son état.
L'augmentation de la valeur de cette variable peut augmenter l'efficacité de la régulation mais aussi le temps de calcul nécessaire. Cette variable n'a pas un impact significatif sur la durée d'exécution dans notre exemple car nous avons peu d'élements dans notre réseau.
Troixièmement, nous appeleons la méthode Display() qui imprime un ensemble de données intéressantes pour vérifier l'état du réseau.

Pour pouvoir utiliser correctement le centre de controle, il faut avoir créer l'ensembles des éléments faisant partie du réseau puis les avoir ajoutés au centre de controle avec les méthodes appropriées à chaque élément de réseau.
Un exemple d'initialisation correcte d'un centre de controle est présenté dans le fichier "program.cs" à l'exception de la boucle "while(true)". Cette boucle se charge d'exécuter la simulation et de la mêttre à jour lorsque l'utilisateur écrit "y" dans la console. 
L'utilisateur peut écrire n'importe quoi d'autre dans la console pour quiter le programme.
